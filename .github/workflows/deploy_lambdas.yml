# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Deploy Lambda Functions

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  determine-builds:
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: nrwl/nx-set-shas@v4
      name: 'Get the SHAs to calculate which functions to build'
      id: setSHAs
    - run: |
        files=($(git diff --name-only ${{ steps.setSHAs.outputs.base }}..${{ steps.setSHAs.outputs.head }}))
        json_array=$(printf '%s\n' "${files[@]}" | jq -R . | jq -s .)
        { 
          echo 'affected_files_list<<EOF'
          echo "$json_array"
          echo EOF
        } >> "$GITHUB_OUTPUT"
      name: 'Get the list of the affected files'
      id: affected_files_list
    - run: |
        import os
        import json
        from pathlib import Path
        affected_files_json=os.environ.get('AFFECTED_FILES_JSON')
        lambda_packages_source_path=os.environ.get('LAMBDA_PACKAGES_SOURCES_PATH')
        if affected_files_json is None:
          print("Didn't get any output from the previous step. Aborting execution")
          exit(1)
        affected_files_list=json.loads(affected_files_json)
        affected_files_paths=[Path(file_path_str) for file_path_str in affected_files_list if lambda_packages_source_path in file_path_str]
        print(f'Converted the file paths into Path objects list: {affected_files_paths}')
        projects_to_build=[]
        for changed_file_path in affected_files_paths:
          parents=changed_file_path.parents
          print(parents)
      shell: python
      env:
        AFFECTED_FILES_JSON: ${{ steps.affected_files_list.outputs.affected_files_list }}
        LAMBDA_PACKAGES_SOURCES_PATH: ${{ vars.LAMBDAPACKAGESSOURCEPATH }}
      name: 'Derive project names from the affected files'

  # deploy:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     pull-requests: write
  #   needs:
  #     - determine-builds
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v1
  #     with:
  #       terraform_wrapper: false
  #   - uses: kishaningithub/setup-tf-summarize@v2
  #     with:
  #       github-token: ${{ secrets.GITHUB_TOKEN }}
  #   - name: Assume the role
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-region: eu-central-1
  #       role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.TG_BOT_DEPLOYER_ROLE_NAME }}
  #       role-session-name: deployLambdas
  #   - name: Terraform Init
  #     run: terraform init
  #   - name: Terraform validate
  #     run: terraform validate 
  #   - name: Terraform Format
  #     run: terraform fmt -check


