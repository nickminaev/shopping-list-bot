# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Deploy Lambda Functions

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  determine-builds:
    runs-on: ubuntu-latest
    permissions:
      actions: read
    outputs:
      projects_to_build: ${{ steps.get-build-projects.outputs.project_dirs_to_build }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: nrwl/nx-set-shas@v4
      name: 'Get the SHAs to calculate which functions to build'
      id: setSHAs
    - run: |
        files=($(git diff --name-only ${{ steps.setSHAs.outputs.base }}..${{ steps.setSHAs.outputs.head }}))
        json_array=$(printf '%s\n' "${files[@]}" | jq -R . | jq -s .)
        { 
          echo 'affected_files_list<<EOF'
          echo "$json_array"
          echo EOF
        } >> "$GITHUB_OUTPUT"
      name: 'Get the list of the affected files'
      id: affected_files_list
    - run: |
        import os
        import json
        from pathlib import Path
        affected_files_json=os.environ.get('AFFECTED_FILES_JSON')
        lambda_packages_source_path=os.environ.get('LAMBDA_PACKAGES_SOURCES_PATH')
        if affected_files_json is None:
          print("Didn't get any output from the previous step. Aborting execution")
          exit(1)
        affected_files_list=json.loads(affected_files_json)
        affected_files_paths=[Path(file_path_str) for file_path_str in affected_files_list if lambda_packages_source_path in file_path_str]
        print(f'Converted the file paths into Path objects list: {affected_files_paths}')
        projects_to_build=[]
        for changed_file_path in affected_files_paths:
          print(f'Exploring parents of the following file that has changed: {changed_file_path}')
          prev_parent = changed_file_path
          print(f'Initial parent is: {prev_parent}')
          for level in range(len(changed_file_path.parents)-1):
            if str(changed_file_path.parents[level])==lambda_packages_source_path:
              print(f'Reached the topmost possible path: {changed_file_path.parents[level]}')
              print(f'Adding the previous parent to the list of proejcts: {prev_parent}')
              projects_to_build.append(str(prev_parent))
              break
            prev_parent=changed_file_path.parents[level]
            print(f'Current file path is: {prev_parent}')
        print(projects_to_build)
        with open(os.environ.get('GITHUB_OUTPUT'), 'a') as fh:
          fh.write(f'project_dirs_to_build={json.dumps(projects_to_build)}')     
      shell: python
      id: get-build-projects
      env:
        AFFECTED_FILES_JSON: ${{ steps.affected_files_list.outputs.affected_files_list }}
        LAMBDA_PACKAGES_SOURCES_PATH: ${{ vars.LAMBDAPACKAGESSOURCEPATH }}
      name: 'Derive project names from the affected files'
  build:
    runs-on: ubuntu-latest
    needs: determine-builds
    continue-on-error: true
    strategy:
      matrix:
        package: ${{ fromJSON(needs.determine-builds.outputs.projects_to_build) }}
    steps:
    - uses: actions/checkout@v4
    - run: |
        package_name=$(echo ${{ matrix.package }} | sed s#${{ vars.LAMBDAPACKAGESSOURCEPATH }}/##)
        echo "$package_name"
        echo "package_name=$package_name" >> "$GITHUB_OUTPUT"
      id: get-package-name
    - name: Package a lambda function
      id: prepare-lambda
      uses: nickminaev/package-lambda-with-uv-action@main
      with:
        working-directory: ${{ matrix.package }}
        output-package-name: ${{ steps.get-package-name.outputs.package_name }}
    - name: 'Upload the package archive'
      if: ${{ steps.prepare-lambda.outputs.destination == 'direct' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get-package-name.outputs.package_name }}
        path: '${{ matrix.package }}/${{ steps.get-package-name.outputs.package_name }}.zip'
        overwrite: true

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write
    needs:
      - build
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: lambda_packages
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    - uses: kishaningithub/setup-tf-summarize@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Assume the role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-central-1
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.TG_BOT_DEPLOYER_ROLE_NAME }}
        role-session-name: deployLambdas
    - name: Terraform Init
      run: terraform init
    - name: Terraform validate
      run: terraform validate 
    - name: Terraform Format
      run: terraform fmt -check


